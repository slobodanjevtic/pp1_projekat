

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, COLON, QUEST, LPAREN, RPAREN, COMMA, LBRACKET, RBRACKET;
terminal PRINT, READ, CONST, VOID, IF, ELSE, DO, WHILE, BREAK, CONTINUE, NEW;
terminal EQUAL, RETURN, PLUS, MINUS, MUL, DIV, MOD, INC, DEC, OR, AND, EQ, NE, LT, LE, GT, GE;
terminal Integer NUMBER;
terminal Boolean BOOLVALUE;
terminal Character CHAR;
terminal String IDENT;

nonterminal VarDeclList VarDeclList;
nonterminal AllVarDeclType AllVarDeclType;
nonterminal VarList VarList;
nonterminal MethodDeclList MethodDeclList;
nonterminal SingleVarDecl SingleVarDecl;
nonterminal ConstVarList ConstVarList;
nonterminal SingleConstVarDecl SingleConstVarDecl;
nonterminal Params Params;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Incop Incop;
nonterminal Relop Relop;
nonterminal Else Else;
nonterminal Do Do;
nonterminal RightParen RightParen;
nonterminal ActualPars ActualPars;
nonterminal ActualParsList ActualParsList;
nonterminal Unmatched Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, SingleMethodDecl, MethodTypeName, Designator, SingleActualParam;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Matched, Type, Expr, Term, Factor, Const, CondExpr, CondTerm, CondFact;

Program ::= (Program) PROG ProgName:progName VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(progName, V1, M2); RESULT.setLine(progNameleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

VarDeclList ::= (VarDecl) VarDeclList:V1 AllVarDeclType:A2 {: RESULT=new VarDecl(V1, A2); RESULT.setLine(V1left); :}
			| 
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			;
			
AllVarDeclType ::= (VarDeclType) Type:varType VarList:list SEMI {: RESULT=new VarDeclType(varType, list); RESULT.setLine(varTypeleft); :}
			|
			(ConstVarDeclType) CONST Type:varType ConstVarList:list SEMI {: RESULT=new ConstVarDeclType(varType, list); RESULT.setLine(varTypeleft); :}
			;

VarList ::= (MultipleVarList) VarList:list COMMA SingleVarDecl:var {: RESULT=new MultipleVarList(list, var); RESULT.setLine(listleft); :}
		|
		(SingleVarList) SingleVarDecl:var {: RESULT=new SingleVarList(var); RESULT.setLine(varleft); :}
		;
			
SingleVarDecl ::= (SingleOneVarDecl)  IDENT:varName {: RESULT=new SingleOneVarDecl(varName); RESULT.setLine(varNameleft); :}
				|
				(SingleArrVarDecl)  IDENT:varName LBRACKET RBRACKET {: RESULT=new SingleArrVarDecl(varName); RESULT.setLine(varNameleft); :}
				;
				
ConstVarList ::= (MultipleConstVarList) ConstVarList:list COMMA SingleConstVarDecl:var {: RESULT=new MultipleConstVarList(list, var); RESULT.setLine(listleft); :}
				|
				(SingleConstVarList) SingleConstVarDecl:var {: RESULT=new SingleConstVarList(var); RESULT.setLine(varleft); :}
				;
				
SingleConstVarDecl ::= (SingleConstVarDecl) IDENT:varName EQUAL Const:C1 {: RESULT=new SingleConstVarDecl(varName, C1); RESULT.setLine(varNameleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDecl) MethodDeclList:M1 SingleMethodDecl:S2 {: RESULT=new MethodDecl(M1, S2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
				;
				
SingleMethodDecl ::= (SingleMethodDecl) MethodTypeName:M1 LPAREN Params:P2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new SingleMethodDecl(M1, P2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) Type:retTypeName IDENT:methName {: RESULT=new MethodTypeName(retTypeName, methName); RESULT.setLine(retTypeNameleft); :};

Params ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
			|
			(NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
			;
			
FormalParamList ::= (MultipleFormalParamDecl) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new MultipleFormalParamDecl(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
				
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:paramName {: RESULT=new FormalParamDecl(T1, paramName); RESULT.setLine(T1left); :};

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
			|
			(UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
			;
		
Unmatched ::= (UnmatchedIf) IF LPAREN CondExpr:C1 RightParen:R2 Statement:S3 {: RESULT=new UnmatchedIf(C1, R2, S3); RESULT.setLine(C1left); :}
			|
			(UnmatchedIfElse) IF LPAREN CondExpr:C1 RightParen:R2 Matched:M3 Else:E4 Unmatched:U5 {: RESULT=new UnmatchedIfElse(C1, R2, M3, E4, U5); RESULT.setLine(C1left); :}
			;
			
			
RightParen ::= (RightParen) RPAREN {: RESULT=new RightParen(); :}; 

Else ::= (Else) ELSE {: RESULT=new Else(); :};

Do ::= (Do) DO {: RESULT=new Do(); :};  
				
Matched ::= (Block) LBRACE StatementList:S1 RBRACE {: RESULT=new Block(S1); RESULT.setLine(S1left); :}
			|
			(Assignment) Designator:dest EQUAL Expr:ex SEMI {: RESULT=new Assignment(dest, ex); RESULT.setLine(destleft); :}
			| 
			(Condition) Designator:dest EQUAL CondExpr:C1 QUEST Expr:E2 COLON Expr:E3 SEMI {: RESULT=new Condition(dest, C1, E2, E3); RESULT.setLine(destleft); :}
			|
			(Increment) Designator:de Incop:I1 SEMI {: RESULT=new Increment(de, I1); RESULT.setLine(deleft); :}
			|
			(ErrorStmt) error SEMI:sm
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + smleft, null); :} {: RESULT=new ErrorStmt(); :}
			|
			(PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			|
			(PrintStmtNum) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtNum(E1, N2); RESULT.setLine(E1left); :}
			|
			(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			|
			(ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			|
			(BreakExpr) BREAK SEMI {: RESULT=new BreakExpr(); :}
			|
			(ContinueExpr) CONTINUE SEMI {: RESULT=new ContinueExpr(); :}
			|
			(ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			|
			(MatchedIfElse) IF LPAREN CondExpr:C1 RightParen:R2 Matched:M3 Else:E4 Matched:M5 {: RESULT=new MatchedIfElse(C1, R2, M3, E4, M5); RESULT.setLine(C1left); :}
			|
			(MatchedDoWhile) Do:D1 Matched:M2 WHILE LPAREN CondExpr:C3 RightParen:R4 SEMI {: RESULT=new MatchedDoWhile(D1, M2, C3, R4); RESULT.setLine(D1left); :}
			|
			(ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			;
			
			
Expr ::= (AddExpr) Expr:ex Addop:A1 Term:tr {: RESULT=new AddExpr(ex, A1, tr); RESULT.setLine(exleft); :}
				|
				(MinusTermExpr) MINUS Term:tr {: RESULT=new MinusTermExpr(tr); RESULT.setLine(trleft); :}
				|
				(TermExpr) Term:tr {: RESULT=new TermExpr(tr); RESULT.setLine(trleft); :}
				;
		
Term ::= (MulExpr) Term:tr Mulop:M1 Factor:fc {: RESULT=new MulExpr(tr, M1, fc); RESULT.setLine(trleft); :}
		| 
		(Fact) Factor:fc {: RESULT=new Fact(fc); RESULT.setLine(fcleft); :}
		;
		
Factor ::= (TypeConst) Const:C1 {: RESULT=new TypeConst(C1); RESULT.setLine(C1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		|
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		|
		(ParenExpr) LPAREN Expr:ex RPAREN {: RESULT=new ParenExpr(ex); RESULT.setLine(exleft); :}
		|
		(ArrExpr) NEW Type:T1 LBRACKET Expr:ex RBRACKET {: RESULT=new ArrExpr(T1, ex); RESULT.setLine(T1left); :}
		;
		
Const ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
		|
		(BoolConst) BOOLVALUE:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
		|
		(CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
		;
		
CondExpr ::= (OrCondExpr) CondExpr:ce OR CondTerm:ct {: RESULT=new OrCondExpr(ce, ct); RESULT.setLine(celeft); :}
			|
			(SingleOrCondExpr) CondTerm:ct {: RESULT=new SingleOrCondExpr(ct); RESULT.setLine(ctleft); :}
			;
			
CondTerm ::= (AndCondExpr) CondTerm:ct AND CondFact:cf {: RESULT=new AndCondExpr(ct, cf); RESULT.setLine(ctleft); :}
			|
			(SingleAndCondExpr) CondFact:cf {: RESULT=new SingleAndCondExpr(cf); RESULT.setLine(cfleft); :}
			;
			
CondFact ::= (RelCondFact) Expr:ex1 Relop:R1 Expr:ex2 {: RESULT=new RelCondFact(ex1, R1, ex2); RESULT.setLine(ex1left); :}
			|
			(SingleRelCondFact) Expr:ex {: RESULT=new SingleRelCondFact(ex); RESULT.setLine(exleft); :}
			;
		
ActualPars ::= (Actuals) ActualParsList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
			
ActualParsList ::= (ActualParams) ActualParsList:A1 COMMA SingleActualParam:S2 {: RESULT=new ActualParams(A1, S2); RESULT.setLine(A1left); :}
				|
				(ActualParam) SingleActualParam:S1 {: RESULT=new ActualParam(S1); RESULT.setLine(S1left); :}
				;
				
SingleActualParam ::= (SingleActualParam) Expr:ex {: RESULT=new SingleActualParam(ex); RESULT.setLine(exleft); :};
			
Designator ::= (SingleDesignator) IDENT:name {: RESULT=new SingleDesignator(name); RESULT.setLine(nameleft); :}
			|
			(ArrayDesignator) IDENT:name LBRACKET Expr:ex RBRACKET {: RESULT=new ArrayDesignator(name, ex); RESULT.setLine(nameleft); :}
			;

Addop ::= (Add) PLUS {: RESULT=new Add(); :}
		|
		(Sub) MINUS {: RESULT=new Sub(); :}
		;
		
Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;
		
Incop ::= (Inc) INC {: RESULT=new Inc(); :}
		|
		(Dec) DEC {: RESULT=new Dec(); :}
		;
		
Relop ::= (Eq) EQ {: RESULT=new Eq(); :}
		| 
		(Ne) NE {: RESULT=new Ne(); :}
		|
		(Lt) LT {: RESULT=new Lt(); :}
		|
		(Le) LE {: RESULT=new Le(); :}
		|
		(Gt) GT {: RESULT=new Gt(); :}
		|
		(Ge) GE {: RESULT=new Ge(); :}
		;
			