

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, EQUAL, RETURN, PLUS, MINUS, MUL, DIV, MOD, INC, DEC, PRINT, READ, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;

nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal SingleVarDecl SingleVarDecl;
nonterminal Params Params;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ActualPars ActualPars;
nonterminal ActualParsList ActualParsList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, SingleMethodDecl, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor;

Program ::= (Program) PROG ProgName:progName VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(progName, V1, M2); RESULT.setLine(progNameleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

VarDeclList ::= (VarDecl) VarDeclList:V1 SingleVarDecl:S2 {: RESULT=new VarDecl(V1, S2); RESULT.setLine(V1left); :}
			| 
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			;
			
SingleVarDecl ::= (SingleVarDecl) Type:varType IDENT:varName SEMI {: RESULT=new SingleVarDecl(varType, varName); RESULT.setLine(varTypeleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDecl) MethodDeclList:M1 SingleMethodDecl:S2 {: RESULT=new MethodDecl(M1, S2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
				;
				
SingleMethodDecl ::= (SingleMethodDecl) MethodTypeName:M1 LPAREN Params:P2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new SingleMethodDecl(M1, P2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) Type:retTypeName IDENT:methName {: RESULT=new MethodTypeName(retTypeName, methName); RESULT.setLine(retTypeNameleft); :};

Params ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
			|
			(NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
			;
			
FormalParamList ::= (MultipleFormalParamDecl) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new MultipleFormalParamDecl(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
				
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:paramName {: RESULT=new FormalParamDecl(T1, paramName); RESULT.setLine(T1left); :};
				
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
			|
			(UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
			;
		
Unmatched ::= (UnmatchedIf) IF Expr:E1 Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
			|
			(UnmatchedElse) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedElse(E1, M2, U3); RESULT.setLine(E1left); :}
			;
				
Matched ::= (Assignment) Designator:dest EQUAL Expr:ex SEMI {: RESULT=new Assignment(dest, ex); RESULT.setLine(destleft); :}
			|
			(ErrorStmt) error SEMI:sm
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + smleft, null); :} {: RESULT=new ErrorStmt(); :}
			|
			(PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			|
			(ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			|
			(ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			|
			(MatchedStatement) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(E1, M2, M3); RESULT.setLine(E1left); :}
			|
			(ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			;
			
Expr ::= (AddExpr) Expr:ex Addop:A1 Term:tr {: RESULT=new AddExpr(ex, A1, tr); RESULT.setLine(exleft); :}
		|
		(MulExpr) Expr:ex Mulop:M1 Term:tr {: RESULT=new MulExpr(ex, M1, tr); RESULT.setLine(exleft); :}
		|
		(TermExpr) Term:tr {: RESULT=new TermExpr(tr); RESULT.setLine(trleft); :}
		;
		
Term ::= (Fact) Factor:fc {: RESULT=new Fact(fc); RESULT.setLine(fcleft); :}
		|
		(Inc) Factor:inc INC {: RESULT=new Inc(inc); RESULT.setLine(incleft); :}
		|
		(Dec) Factor:dec DEC {: RESULT=new Dec(dec); RESULT.setLine(decleft); :}
		;
		

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		|
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		;
		
ActualPars ::= (Actuals) ActualParsList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
			
ActualParsList ::= (ActualParams) ActualParsList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

Addop ::= (Add) PLUS {: RESULT=new Add(); :}
		|
		(Sub) MINUS {: RESULT=new Sub(); :}
		;
		
Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;
			