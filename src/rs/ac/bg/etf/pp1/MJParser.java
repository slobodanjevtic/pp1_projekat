
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 12 15:50:23 CET 2021
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 12 15:50:23 CET 2021
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\023\010\000\002\002\004\000\002\022" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\005" +
    "\000\002\031\003\000\002\004\004\000\002\004\002\000" +
    "\002\024\012\000\002\025\004\000\002\006\003\000\002" +
    "\006\002\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\007\004\000\002\007\002\000\002\012\003" +
    "\000\002\012\003\000\002\021\007\000\002\021\011\000" +
    "\002\030\005\000\002\030\006\000\002\030\005\000\002" +
    "\030\004\000\002\030\007\000\002\030\007\000\002\030" +
    "\005\000\002\030\004\000\002\030\011\000\002\030\011" +
    "\000\002\030\007\000\002\032\005\000\002\032\004\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\006\000\002\034\005\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\003\000" +
    "\002\037\005\000\002\037\003\000\002\017\003\000\002" +
    "\017\002\000\002\020\005\000\002\020\003\000\002\027" +
    "\003\000\002\026\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\004\005\001\002\000\004\002\206\001" +
    "\002\000\004\042\006\001\002\000\006\005\uffff\042\uffff" +
    "\001\002\000\006\005\ufffd\042\ufffd\001\002\000\006\005" +
    "\011\042\014\001\002\000\006\006\ufff9\042\ufff9\001\002" +
    "\000\004\042\015\001\002\000\006\005\ufffe\042\ufffe\001" +
    "\002\000\004\042\ufffb\001\002\000\004\007\016\001\002" +
    "\000\006\005\ufffc\042\ufffc\001\002\000\006\006\022\042" +
    "\014\001\002\000\004\042\205\001\002\000\006\006\ufffa" +
    "\042\ufffa\001\002\000\004\002\001\001\002\000\004\010" +
    "\024\001\002\000\006\011\ufff5\042\014\001\002\000\004" +
    "\042\204\001\002\000\006\011\ufff6\012\202\001\002\000" +
    "\004\011\031\001\002\000\006\011\ufff3\012\ufff3\001\002" +
    "\000\006\005\ufffd\042\ufffd\001\002\000\006\005\033\042" +
    "\014\001\002\000\024\003\ufff0\005\ufff0\006\ufff0\013\ufff0" +
    "\014\ufff0\017\ufff0\042\ufff0\043\ufff0\045\ufff0\001\002\000" +
    "\024\003\044\005\036\006\051\013\045\014\035\017\047" +
    "\042\037\043\042\045\050\001\002\000\004\010\176\001" +
    "\002\000\024\003\ufff0\005\ufff0\006\ufff0\013\ufff0\014\ufff0" +
    "\017\ufff0\042\ufff0\043\ufff0\045\ufff0\001\002\000\052\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\016\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\001\002\000\024\003\uffee\005\uffee\006\uffee\013\uffee\014" +
    "\uffee\017\uffee\042\uffee\043\uffee\045\uffee\001\002\000\012" +
    "\010\164\016\162\025\161\026\163\001\002\000\004\010" +
    "\152\001\002\000\024\003\ufff1\005\ufff1\006\ufff1\013\ufff1" +
    "\014\ufff1\017\ufff1\042\ufff1\043\ufff1\045\ufff1\001\002\000" +
    "\004\007\151\001\002\000\004\010\145\001\002\000\024" +
    "\003\uffef\005\uffef\006\uffef\013\uffef\014\uffef\017\uffef\042" +
    "\uffef\043\uffef\045\uffef\001\002\000\020\007\143\010\070" +
    "\021\056\037\062\040\057\041\071\042\037\001\002\000" +
    "\022\003\044\005\036\013\045\014\035\017\047\042\037" +
    "\043\052\045\050\001\002\000\006\006\ufff8\042\ufff8\001" +
    "\002\000\004\010\134\001\002\000\004\046\054\001\002" +
    "\000\004\010\055\001\002\000\016\010\070\021\056\037" +
    "\062\040\057\041\071\042\037\001\002\000\014\010\070" +
    "\037\062\040\057\041\071\042\037\001\002\000\042\007" +
    "\uffda\011\uffda\012\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\001\002\000\030\011\uffd0\020\074" +
    "\021\075\027\uffd0\030\uffd0\031\124\032\130\033\131\034" +
    "\126\035\127\036\123\001\002\000\044\007\uffd8\010\113" +
    "\011\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\001\002\000\042\007\uffdb\011\uffdb\012" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\001\002\000\006\011\107\027\110\001\002\000\010" +
    "\011\uffd2\027\uffd2\030\uffd2\001\002\000\042\007\uffde\011" +
    "\uffde\012\uffde\020\uffde\021\uffde\022\101\023\102\024\100" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\001\002\000\042\007\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\001\002\000\010\011\uffd4\027\uffd4\030\105\001\002\000" +
    "\016\010\070\021\056\037\062\040\057\041\071\042\037" +
    "\001\002\000\042\007\uffd9\011\uffd9\012\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\001\002\000" +
    "\010\011\073\020\074\021\075\001\002\000\042\007\uffd6" +
    "\011\uffd6\012\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\001\002\000\014\010\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\001\002\000\014\010\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\001\002\000\014\010\070\037" +
    "\062\040\057\041\071\042\037\001\002\000\042\007\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\022\101\023\102\024" +
    "\100\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\001\002\000\014\010\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\001\002\000\014\010\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\001\002\000\014\010\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\001\002\000\014\010\070" +
    "\037\062\040\057\041\071\042\037\001\002\000\042\007" +
    "\uffdd\011\uffdd\012\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\001\002\000\016\010\070\021\056" +
    "\037\062\040\057\041\071\042\037\001\002\000\010\011" +
    "\uffd3\027\uffd3\030\uffd3\001\002\000\004\007\112\001\002" +
    "\000\016\010\070\021\056\037\062\040\057\041\071\042" +
    "\037\001\002\000\010\011\uffd5\027\uffd5\030\105\001\002" +
    "\000\030\003\uffe2\005\uffe2\006\uffe2\013\uffe2\014\uffe2\017" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002" +
    "\000\020\010\070\011\uffce\021\056\037\062\040\057\041" +
    "\071\042\037\001\002\000\004\011\122\001\002\000\012" +
    "\011\uffcb\012\uffcb\020\074\021\075\001\002\000\006\011" +
    "\uffcf\012\120\001\002\000\006\011\uffcc\012\uffcc\001\002" +
    "\000\016\010\070\021\056\037\062\040\057\041\071\042" +
    "\037\001\002\000\006\011\uffcd\012\uffcd\001\002\000\042" +
    "\007\uffd7\011\uffd7\012\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\001\002\000\016\010\uffbd\021" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\001\002\000\016" +
    "\010\uffc2\021\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\001" +
    "\002\000\016\010\070\021\056\037\062\040\057\041\071" +
    "\042\037\001\002\000\016\010\uffbf\021\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\001\002\000\016\010\uffbe\021\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\001\002\000\016\010" +
    "\uffc1\021\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\001\002" +
    "\000\016\010\uffc0\021\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\001\002\000\014\011\uffd1\020\074\021\075\027\uffd1" +
    "\030\uffd1\001\002\000\042\007\uffdf\011\uffdf\012\uffdf\020" +
    "\uffdf\021\uffdf\022\101\023\102\024\100\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\001" +
    "\002\000\016\010\070\021\056\037\062\040\057\041\071" +
    "\042\037\001\002\000\006\011\136\027\110\001\002\000" +
    "\022\003\044\005\036\013\045\014\035\017\047\042\037" +
    "\043\052\045\050\001\002\000\004\044\140\001\002\000" +
    "\022\003\044\005\036\013\045\014\035\017\047\042\037" +
    "\043\052\045\050\001\002\000\030\003\uffe3\005\uffe3\006" +
    "\uffe3\013\uffe3\014\uffe3\017\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\001\002\000\010\007\144\020\074\021" +
    "\075\001\002\000\030\003\uffe4\005\uffe4\006\uffe4\013\uffe4" +
    "\014\uffe4\017\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\001\002\000\030\003\uffe5\005\uffe5\006\uffe5\013\uffe5" +
    "\014\uffe5\017\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\001\002\000\016\010\070\021\056\037\062\040\057" +
    "\041\071\042\037\001\002\000\010\011\147\020\074\021" +
    "\075\001\002\000\004\007\150\001\002\000\030\003\uffe7" +
    "\005\uffe7\006\uffe7\013\uffe7\014\uffe7\017\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\001\002\000\030\003\uffe8" +
    "\005\uffe8\006\uffe8\013\uffe8\014\uffe8\017\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002\000\016\010\070" +
    "\021\056\037\062\040\057\041\071\042\037\001\002\000" +
    "\006\011\154\027\110\001\002\000\022\003\044\005\036" +
    "\013\045\014\035\017\047\042\037\043\042\045\050\001" +
    "\002\000\024\003\uffed\005\uffed\006\uffed\013\uffed\014\uffed" +
    "\017\uffed\042\uffed\043\uffed\045\uffed\001\002\000\026\003" +
    "\uffef\005\uffef\006\uffef\013\uffef\014\uffef\017\uffef\042\uffef" +
    "\043\uffef\044\157\045\uffef\001\002\000\022\003\044\005" +
    "\036\013\045\014\035\017\047\042\037\043\042\045\050" +
    "\001\002\000\024\003\uffec\005\uffec\006\uffec\013\uffec\014" +
    "\uffec\017\uffec\042\uffec\043\uffec\045\uffec\001\002\000\004" +
    "\007\uffc4\001\002\000\016\010\070\021\056\037\062\040" +
    "\057\041\071\042\037\001\002\000\004\007\uffc3\001\002" +
    "\000\020\010\070\011\uffce\021\056\037\062\040\057\041" +
    "\071\042\037\001\002\000\004\007\166\001\002\000\030" +
    "\003\uffe9\005\uffe9\006\uffe9\013\uffe9\014\uffe9\017\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001\002\000\004" +
    "\011\170\001\002\000\004\007\171\001\002\000\030\003" +
    "\uffe1\005\uffe1\006\uffe1\013\uffe1\014\uffe1\017\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\010\007" +
    "\173\020\074\021\075\001\002\000\030\003\uffea\005\uffea" +
    "\006\uffea\013\uffea\014\uffea\017\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\001\002\000\024\003\044\005\036" +
    "\006\175\013\045\014\035\017\047\042\037\043\042\045" +
    "\050\001\002\000\030\003\uffeb\005\uffeb\006\uffeb\013\uffeb" +
    "\014\uffeb\017\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\004\042\037\001\002\000\004\011\200" +
    "\001\002\000\004\007\201\001\002\000\030\003\uffe6\005" +
    "\uffe6\006\uffe6\013\uffe6\014\uffe6\017\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\001\002\000\004\042\014\001" +
    "\002\000\006\011\ufff4\012\ufff4\001\002\000\006\011\ufff2" +
    "\012\ufff2\001\002\000\004\010\ufff7\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\023\003\001\001\000\002\001\001\000" +
    "\004\022\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\006\005\012\031\011\001\001\000\004\004" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\020\025\022\031\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\026\010\025\011\027\031\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\031\001\001\000\006\005\012\031\011\001\001" +
    "\000\004\007\033\001\001\000\012\012\042\021\037\026" +
    "\040\030\045\001\001\000\002\001\001\000\004\007\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\060\032\141\033\064\034\065\001\001\000\006\026\040" +
    "\030\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\060\032\057" +
    "\033\064\034\065\035\062\036\066\037\063\001\001\000" +
    "\010\026\060\033\132\034\065\001\001\000\002\001\001" +
    "\000\006\013\075\016\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\060\032\071\033\064\034\065\001\001\000\002" +
    "\001\001\000\004\013\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\060\033\076" +
    "\034\065\001\001\000\004\014\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\060" +
    "\034\103\001\001\000\002\001\001\000\014\026\060\032" +
    "\057\033\064\034\065\037\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\060\032\057\033\064\034" +
    "\065\036\110\037\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\113\020\115\026\060\027\116\032" +
    "\114\033\064\034\065\001\001\000\002\001\001\000\004" +
    "\013\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\026\060\027\120\032\114\033\064\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\060\032\131\033\064\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\075\001\001\000\004" +
    "\014\102\001\001\000\020\026\060\032\057\033\064\034" +
    "\065\035\134\036\066\037\063\001\001\000\002\001\001" +
    "\000\006\026\040\030\136\001\001\000\002\001\001\000" +
    "\006\026\040\030\140\001\001\000\002\001\001\000\004" +
    "\013\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\060\032\145\033\064\034\065\001\001\000\004" +
    "\013\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\060\032\057\033\064\034\065" +
    "\035\152\036\066\037\063\001\001\000\002\001\001\000" +
    "\012\012\154\021\037\026\040\030\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\157\026\040\030" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\060\032\171\033\064\034\065\001\001\000\002\001" +
    "\001\000\020\017\166\020\115\026\060\027\116\032\114" +
    "\033\064\034\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\075\001\001\000\002\001\001\000\012\012" +
    "\042\021\037\026\040\030\045\001\001\000\002\001\001" +
    "\000\004\026\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\202\031\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errorDetected = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Relop ::= GE 
            {
              Relop RESULT = null;
		 RESULT=new Ge(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Relop ::= GT 
            {
              Relop RESULT = null;
		 RESULT=new Gt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Relop ::= LE 
            {
              Relop RESULT = null;
		 RESULT=new Le(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Relop ::= LT 
            {
              Relop RESULT = null;
		 RESULT=new Lt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Relop ::= NE 
            {
              Relop RESULT = null;
		 RESULT=new Ne(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Relop ::= EQ 
            {
              Relop RESULT = null;
		 RESULT=new Eq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Incop ::= DEC 
            {
              Incop RESULT = null;
		 RESULT=new Dec(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*Incop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Incop ::= INC 
            {
              Incop RESULT = null;
		 RESULT=new Inc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*Incop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new Mod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new Div(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new Mul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new Sub(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new Add(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SingleActualParam ::= Expr 
            {
              SingleActualParam RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleActualParam(ex); RESULT.setLine(exleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleActualParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ActualParsList ::= SingleActualParam 
            {
              ActualParsList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleActualParam S1 = (SingleActualParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParam(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ActualParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ActualParsList ::= ActualParsList COMMA SingleActualParam 
            {
              ActualParsList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActualParsList A1 = (ActualParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleActualParam S2 = (SingleActualParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParams(A1, S2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ActualParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ActualPars ::= 
            {
              ActualPars RESULT = null;
		 RESULT=new NoActuals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ActualPars ::= ActualParsList 
            {
              ActualPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActualParsList A1 = (ActualParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actuals(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleRelCondFact(ex); RESULT.setLine(exleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RelCondFact(ex1, R1, ex2); RESULT.setLine(ex1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact cf = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleAndCondExpr(cf); RESULT.setLine(cfleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm ct = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact cf = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AndCondExpr(ct, cf); RESULT.setLine(ctleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CondExpr ::= CondTerm 
            {
              CondExpr RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm ct = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleOrCondExpr(ct); RESULT.setLine(ctleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*CondExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CondExpr ::= CondExpr OR CondTerm 
            {
              CondExpr RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondExpr ce = (CondExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm ct = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OrCondExpr(ce, ct); RESULT.setLine(celeft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*CondExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ParenExpr(ex); RESULT.setLine(exleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Factor RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator func = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActualPars A1 = (ActualPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var(d); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Term ::= Factor 
            {
              Term RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor fc = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Fact(fc); RESULT.setLine(fcleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int trleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term tr = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor fc = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MulExpr(tr, M1, fc); RESULT.setLine(trleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= Term 
            {
              Expr RESULT = null;
		int trleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term tr = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermExpr(tr); RESULT.setLine(trleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int trleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term tr = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MinusTermExpr(tr); RESULT.setLine(trleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term tr = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AddExpr(ex, A1, tr); RESULT.setLine(exleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Matched ::= Designator LPAREN ActualPars RPAREN SEMI 
            {
              Matched RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator func = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActualPars A1 = (ActualPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Matched ::= DO Matched WHILE LPAREN CondExpr RPAREN SEMI 
            {
              Matched RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondExpr C2 = (CondExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedDoWhile(M1, C2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Matched ::= IF LPAREN CondExpr RPAREN Matched ELSE Matched 
            {
              Matched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		CondExpr C1 = (CondExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedIfElse(C1, M2, M3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Matched ::= RETURN SEMI 
            {
              Matched RESULT = null;
		 RESULT=new ReturnNoExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Matched ::= RETURN Expr SEMI 
            {
              Matched RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnExpr(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStmt(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Matched ::= error SEMI 
            {
              Matched RESULT = null;
		int smleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + smleft, null);  RESULT=new ErrorStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Matched ::= Designator Incop SEMI 
            {
              Matched RESULT = null;
		int deleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator de = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Incop I1 = (Incop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Increment(de, I1); RESULT.setLine(deleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Matched RESULT = null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator dest = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Assignment(dest, ex); RESULT.setLine(destleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Matched ::= LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Block(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Unmatched ::= IF LPAREN CondExpr RPAREN Matched ELSE Unmatched 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		CondExpr C1 = (CondExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Unmatched ::= IF LPAREN CondExpr RPAREN Statement 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondExpr C1 = (CondExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statements(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalParamDecl ::= Type IDENT 
            {
              FormalParamDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParamDecl(T1, paramName); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalParamList ::= FormalParamDecl 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDecl F1 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormalParamList F1 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDecl F2 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleFormalParamDecl(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Params ::= 
            {
              Params RESULT = null;
		 RESULT=new NoFormParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*Params*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Params ::= FormalParamList 
            {
              Params RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamList F1 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParams(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*Params*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodTypeName ::= Type IDENT 
            {
              MethodTypeName RESULT = null;
		int retTypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type retTypeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodTypeName(retTypeName, methName); RESULT.setLine(retTypeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SingleMethodDecl ::= MethodTypeName LPAREN Params RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              SingleMethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodTypeName M1 = (MethodTypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Params P2 = (Params)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclList V3 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new SingleMethodDecl(M1, P2, V3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*SingleMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodDeclList ::= MethodDeclList SingleMethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleMethodDecl S2 = (SingleMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDecl(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SingleVarDecl ::= Type IDENT SEMI 
            {
              SingleVarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new SingleVarDecl(varType, varName); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*SingleVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;
		 RESULT=new NoVarDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDeclList SingleVarDecl 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleVarDecl S2 = (SingleVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDecl(V1, S2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName VarDeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName progName = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(progName, V1, M2); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

